Wrapper classes in Java : 

=======================
P.D.T    Wrapper-class
=======================
byte	  Byte
short	  Short
int 	  Integer
long	  Long
float	  Float
double	  Double
char	  Character
boolean	  Boolean
=======================
Converting a String into its equalent P.D.T:
Syntax:
datatype var = Wrapper-class.parseXXX("string-value");
Eg:
int a = Integer.parseInt("100");
double d = Double.parseDouble("12.5");
===================================================
/* Program to implement Wrapper classes */

class WrapperDemo1
{
 public static void main(String args[])
 {
  int a = Integer.parseInt(args[0]);
  int b = Integer.parseInt(args[1]);
  int c = a + b;
  System.out.println("Sum = " + c);
 } // main()
} // class
java WrapperDemo1 100 200
=================================================
/* Program to read a number from command line and check whether the given number is Prime or not */

class PrimeDemo
{
 public static void main(String args[])
 {
  int n = Integer.parseInt(args[0]);
  int count = 0;
  for(int i=2;i<=n/2;i++)
   if(n % i == 0)
     count++;
  if(count == 0)
   System.out.println("The Entered Number is a Prime");
  else
   System.out.println("The Entered Number is not a Prime");
 } // main()
} // class

java PrimeDemo 12
=================================================
Creating objects in Java :
Syntax-1 :
class-name reference;
reference = new class-name();
Eg:
Sample s;
s = new Sample();

Syntax-2:
class-name reference = new class-name();
Sample s = new Sample();
=> Now with this reference,we can access the class-members using dot operator as below:
reference.class-member
Eg:
s.a,s.b,s.fun1(),s.fun2()
NOTE : reference is the variable which holds the address of object
=================================================
/* Program to demonstrate objects */

class ObjDemo1
{
 int a = 100,b = 200; 
 void fun1()
 {
  System.out.println("Inside fun1 of Sample");
 }
 void fun2()
 {
  System.out.println("Inside fun2 of Sample");
 }
 public static void main(String args[])
 {
  ObjDemo1 d = new ObjDemo1();
  System.out.println("a = " + d.a);
  System.out.println("b = " + d.b);
  d.fun1();
  d.fun2();
  System.out.println("Address of Object : " + d);
 }
} // class
==================================================
/* Program-2 on objects */

class Employee
{
 int empno;
 String name;
 double basic;
 void getEmp(int x,String y,double z)
 {
  empno = x;
  name = y;
  basic = z;
 }
 void printEmp()
 {
  System.out.println(empno + "   " + name + "   " + basic);
 }
 public static void main(String args[])
 {
  Employee e1 = new Employee();
  Employee e2 = new Employee();
  Employee e3 = new Employee();
  e1.getEmp(101,"Suresh",10000.00);
  e2.getEmp(102,"Ramesh",20000.00);
  e3.getEmp(103,"Mahesh",30000.00);
  System.out.println("The Employee Details are : ");
  e1.printEmp();
  e2.printEmp();
  e3.printEmp();
 } // main()
} // class
====================================
/* Accessing the members of one class inside another */

class Sample
{
 int a = 100,b = 200;
 void fun1()
 {
  System.out.println("Inside fun1 of Sample"); 
 }
 void fun2()
 {
  System.out.println("Inside fun2 of Sample"); 
 }
} // end of class Sample

class ObjDemo3
{
 public static void main(String args[])
 {
  Sample s = new Sample();
  System.out.println("a = " + s.a);
  System.out.println("b = " + s.b);
  s.fun1();
  s.fun2();
 } // main()
} // class
---------------------------------------------
NOTE : If a Java file has multiple classes, for each class, a separate ".class" file will be created.
---------------------------------------------
